View(ml)
View_edit(ml)
with(ml, table(ses, prog))
with(ml, do.call(rbind, tapply(write, prog, function(x) c(M = mean(x), SD = sd(x)))))
ml$prog2 <- relevel(ml$prog, ref = "academic")
test <- multinom(prog2 ~ ses + write, data = ml)
summary(test)
z <- summary(test)$coefficients/summary(test)$standard.errors
z
p <- (1 - pnorm(abs(z), 0, 1))*2
p
math = read.table("http://www.utstat.toronto.edu/~brunner/312f12/code_n_data/mathcat.data")
data(mtcars)
summary(mtcars)
car_data <- data(mtcars)
?ggplot
car1<-ggplot(car_data, aes(disp, mpg))
library(ggplot2)
car1<-ggplot(car_data, aes(disp, mpg))
car_data <- data(mtcars)
car1<-ggplot(car_data, aes(disp, mpg))
car1<-ggplot(car_data, aes(x=disp, y=mpg))
summary(car_data)
car_data <- mtcars
(car_data, aes(x=disp, y=mpg))
car1<-ggplot(car_data, aes(x=disp, y=mpg))
car1<-c+geom_point()
car1<-car1+geom_point()
car1
dat <- subset(mtcars, select=c(mpg, am, vs))
dat
head(mtcars)
logr_vm <- glm(vs ~ mpg, data=dat, family=binomial)
logr_vm
summary(logr_vm)
ggplot(dat, aes(x=mpg, y=vs)) + geom_point() +
stat_smooth(method="glm", family="binomial", se=FALSE)
ggplot(dat, aes(x=mpg, y=vs)) + geom_point()
?stat_smooth
ggplot(dat, aes(x=mpg, y=vs)) + geom_point() +
stat_smooth(method="glm",  se=FALSE)
plot(dat$mpg, dat$vs)
curve(predict(logr_vm, data.frame(mpg=x), type="response"), add=TRUE)
dat
logr_va <- glm(vs ~ am, data=dat, family=binomial)
logr_va
summary(logr_va)
?glm
coefficients(logr_va)
library(ggplot2)
ggplot(dat, aes(x=am, y=vs)) +
geom_point(shape=1, position=position_jitter(width=.05,height=.05)) +
stat_smooth(method="glm", family="binomial", se=FALSE)
plot(jitter(dat$am, .2), jitter(dat$vs, .2))
curve(predict(logr_va, data.frame(am=x), type="response"), add=TRUE)
logr_vma <- glm(vs ~ mpg + am, data=dat, family=binomial)
logr_vma
p <- predict.glm(logr_vma, newdata = dat,type = "response")
p
tmp <- data.frame(p,dat[1])
tmp <- na.omit(tmp)
library(pROC)
auc(tmp$Train.sales,tmp$p)
auc(tmp[$Train]1].sales,tmp$p)
auc(tmp[$Train]1].sales,tmp$p)
tmp
auc(tmp[$Train]1],tmp$p)
auc(tmp[1],tmp$p)
names(tmp)[1] <- 'car'
tmp
names(tmp)[0] <- 'car'
tmp
xvar <- 1:20 + rnorm(20,sd=3)
xvar
zvar <- 1:20/4 + rnorm(20,sd=2)
yvar <- -2*xvar + xvar*zvar/5 + 3 + rnorm(20,sd=4)
dat <- data.frame(x=xvar, y=yvar, z=zvar)
head(dat)
ggplot(data = dat, aes(xvar, yvar)) + geom_point()
ggplot(data=dat, aes(xvar)) + geom_histogram()
ggplot(data=dat, aes(xvar)) + geom_histogram(bins = 10)
hist(rnorm(20, sd = 3))
cor(dat$x, dat$y)
cor(dat$z, dat$y)
cor(dat)
round(cor(dat), 2)
fit <- lm(y ~ x, data=dat)  # Using the columns x and y from the data frame
fit <- lm(dat$y ~ dat$x)     # Using the vectors dat$x and dat$y
fit
summary(fit)
fit2 <- lm(y ~ x + z, data=dat)    # Using the columns x, y, and z from the data frame
fit2 <- lm(dat$y ~ dat$x + dat$z)  # Using the vectors x, y, z
fit2
coefficients(fit2)
algae[!is.na(algae$NH4) & algae$NH4 > 19000, ]
library(DMwR)
algae[!is.na(algae$NH4) & algae$NH4 > 19000, ]
algae[is.na(algae$NH4), ]
bwplot(size ~ a1, data = algae, ylab = 'River Size', xlab = 'Algal A1')
bwplot(size ~ a1, data = algae, panel = panel.bwplot
, probs = seq(.01, .49, by = .01), datadensity = TRUE
, ylab = 'River Size', xlab = 'Algal A1')
min02 <- equal.count(na.omit(algae$mnO2), number = 4, overlap = 1/5)
stripplot(season ~ a3|min02, data = algae[!is.na(algae$mnO2), ])
bwplot(size ~ a1, data = algae, panel = panel.bwplot
, probs = seq(.01, .49, by = .01), datadensity = TRUE
, ylab = 'River Size', xlab = 'Algal A1')
library(Hmisc)
algae[!complete.casee(algae),]
algae[!complete.cases(algae),]
nrow(algae[!complete.cases(algae),])
algae <- na.omit(algae)
algae[!complete.cases(algae),]
?na.omit
algae[-c(62, 199),]
algae[c(62, 199),]
algae[62,]
algae[199,]
apply(algae, 1, function (x) sum(is.na(x)))
is.na(algae[1,])
sum(is.na(algae[1,]))
sum(is.na(algae))
?apply
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
dimnames(x)[[1]]
dimnames(x)
dimnames(x) <- letters[1:8]
dimnames(x)[[1]] <- letters[1:8]
dimnames(x)
dim(x)
apply(x, 2, mean, trim = .2)
col.sums<-apply(x, 2, sum)
col.sums
apply(algae, 1, function (x) sum(is.na(x)))
data(algae)
manyNAs(algae, 0.2)
algae <- algae[-manyNAs(algae),]
algae[is.na(algae$Chla), "Chla"] <- median(algae$Chla, na.rm = T)
algae[manyNAs(algae), ]
centralImputation(algae)
data(algae)
centralImputation(algae)
data(algae)
algae
algae <- centralImputation(algae)
algae
algae <- algae[-manyNAs(algae), ]
names(algae[, 4:18])
cor(algae[, 4:18], use = "complete.obs")
cor(algae[, 4:18], use = "complete.obs")
?cor
data(algae)
cor(algae[, 4:18], use = "complete.obs")
symnum(cor(algae[,4:18], use = "complete.obs"))
data(algae)
alage <-alage[-manyNAs(algae), ]
algae <-algae[-manyNAs(algae), ]
lm(alage$NH4 ~ algae$NO3, data = algae)
lm(algae$NH4 ~ algae$NO3, data = algae)
lm(PO4 ~ oPO4, data = algae)
algae[28, "PO4"]
algae[28, "PO4"] <- 42.897 + 1.293*algae[28, "oPO4"]
algae[28, "PO4"]
fillPO4<-function(oP){
if(is.na(oP))
return(NA)
else return(42.897 + 1.293 * oP)
}
algae[is.na(algae$PO4), "PO4"] <- sapply(algae[is.na(algae$PO4),"oPO4"], fillPO4 )
histogram(~mxPH | season, data = algae)
algae$season <- factor(algae$season, levels = c("spring", "summer", "autumn", "winter"))
histogram(~mxPH | season, data = algae)
histogram(~mxPH | size * speed, data = algae)
stripplot(Size ~ mxPH | speed, data = algae, jitter = T)
stripplot(size ~ mxPH | speed, data = algae, jitter = T)
data(algae)
algae <- algae[-manyNAs(algae),]
data(algae)
algae <- algae
algae <- algae[-manyNAs(algae),]
algae <- knnImputation(algae, k = 10)
data(algae)
algae <- algae[-manyNAs(algae),]
clean.algae <- knnImputation(algae, k = 10)
names(clean.algae[, 1:12])
lm.a1 <- lm(a1 ~ ., data = clean.algae[, 1:12])
lm.a1
summary(lm.a1)
anova(lm.a1)
summary(lm.a1)
plot(lm.a1)
anova(lm.a1)
lm2.a1 <- update(lm.a1, .~.-season)
summary(lm2.a1)
anova(lm2.a1)
anova(lm.a1, lm2.a1)
final.lm <- step(lm.a1)
summary(final.lm)
library(rpart)
data(algae)
algae <- algae[-manyNAs(algae), ]
algae <- algae[-manyNAs(algae), ]
ilbrary(DMwR)
library(DMwR)
data(algae)
algae <- algae[-manyNAs(algae), ]
rt.aq <- rpart(a1~., data = algae[, 1:12])
rt.a1 <- rpart(a1~., data = algae[, 1:12])
ft.a1
rt.a1
rpart.plot(rt.a1)
library(rpart.plot)
rpart.plot(rt.a1)
prettyTree(rt.a1)
rpart.plot(rt.a1)
prettyTree(rt.a1)
rpart.plot(rt.a1)
head(algae)
printcp(rt.a1)
rt2.a1 <- prune(ft.a1, cp = 0.030887)
rt2.a1 <- prune(rt.a1, cp = 0.030887)
plot(rt2.a1)
rt2.a1
(rt.a1<- rpartXse(a1 ~., data = algae[, 1:12]))
plot(rt.a1)
rpart.plot(rt.a1)
View(ml)
lmpredictions.a1 <- predict(final.lm, clean.algae)
lmpredictions.a1
edit(lmpredictions.aq)
edit(lmpredictions.a1)
lmpredictions.a1 <-edit(lmpredictions.a1)
rt.predictions.a1 <- predict(rt.a1, algae)
mae.a1.lm <- mean(abs(lm.predictions.a1 - algae[, "a1"]))
lm.predictions.a1 <- predict(final.lm, clean.algae)
mae.a1.lm <- mean(abs(lm.predictions.a1 - algae[, "a1"]))
mae.a1.rt <- mean(abs(rt.predictions.a1 - algae[, "a1"]))
mae.a1.lm
mae.a1.rt
mse.a1.lm
mse.a1.rt
mse.a1.lm <- mean((lm.predictions.a1 - algae[, "a1"])^2)
mse.a1.rt <- mean((rt.predictions.a1 - algae[, "a1"])^2)
mse.a1.lm
mse.a1.rt
nmse.a1.lm <- mean(((lm.predictions.a - algae[, "a1"])^2)/
mean((mean(algae[, "a1"]) - algae[, "a1"])^2))
nmse.a1.rt <- mean((rt.predictions.a1 - algae[, "a1"])^2)/
mean((mean(algae[, "a1"]) - algae[, "a1"])^2)
nmse.a1.lm <- mean((lm.predictions.a - algae[, "a1"])^2)/
mean((mean(algae[, "a1"]) - algae[, "a1"])^2))
nmse.a1.lm <- mean((lm.predictions.a1 - algae[, "a1"])^2)/
mean((mean(algae[, "a1"]) - algae[, "a1"])^2))
nmse.a1.lm <- mean((lm.predictions.a1 - algae[, "a1"])^2)/
mean((mean(algae[, "a1"]) - algae[, "a1"])^2)
nmse.a1.lm
nmse.a1.rt
regr.eval(algae[, "a1"], rt.predictions.a1, train.y = algae[, "a1"])
library(DMwR)
regr.eval(algae[, "a1"], rt.predictions.a1, train.y = algae[, "a1"])
regr.eval(algae[, "a1"], lm.predictions.a1, train.y = algae[, "a1"])
old.par <- par(mfrow = c(1, 2))
plot(lm.predictions.a1, algae[, "a1"], main = "Linear Model",
+ xlab = "Predictions", ylab = "True Values")
abline(0, 1, lty = 2)
plot(rt.predictions.a1, algae[, "a1"], main = "Regression Tree",
+ xlab = "Predictions", ylab = "True Values")
abline(0, 1, lty = 2)
plot(lm.predictions.a1, algae[, "a1"], main = "Linear Model",
+ xlab = "Predictions", ylab = "True Values")
plot(lm.predictions.a1, algae[, "a1"], main = "Linear Model",
xlab = "Predictions", ylab = "True Values")
plot(lm.predictions.a1, algae[, "a1"], main = "Linear Model",
xlab = "Predictions", ylab = "True Values")
abline(0, 1, lty = 2)
plot(rt.predictions.a1, algae[, "a1"], main = "Regression Tree",
xlab = "Predictions", ylab = "True Values")
abline(0, 1, lty = 2)
plot(lm.predictions.a1, algae[, "a1"], main = "Linear Model",
xlab = "Predictions", ylab = "True Values")
abline(0, 1, lty = 2)
plot(rt.predictions.a1, algae[, "a1"], main = "Regression Tree",
xlab = "Predictions", ylab = "True Values")
abline(0, 1, lty = 2)
old.par <- par(mfrow = c(1, 2))
plot(lm.predictions.a1, algae[, "a1"], main = "Linear Model",
xlab = "Predictions", ylab = "True Values")
abline(0, 1, lty = 2)
plot(rt.predictions.a1, algae[, "a1"], main = "Regression Tree",
xlab = "Predictions", ylab = "True Values")
abline(0, 1, lty = 2)
par(old.par)
sensible.lm.predictions.a1 <- ifelse(lm.predictions.a1 < 0, 0, lm.predictions.a1)
regr.eval(algae[, "a1"], lm.predictions.a1, stats = c("mae", "mse"))
regr.eval(algae[, "a1"], sensible.lm.predictions.a1, stats = c("mae", "mse"))
library(DMwR)
data(GSPC)
head(GSPC)
summary(GSPC)
library(xts)
x1<- xts(rnorm(100), seq(as.POSIXct("2000-01-01"), len = 100, by = "day"))
x1
x3<- xts(rnorm(100), as.Date(c("2005-01-01", "2005-01-10", "2005-01-12")))
x3<- xts(rnorm(3), as.Date(c("2005-01-01", "2005-01-10", "2005-01-12")))
x3
x1["20000105"]
x1["2000-04"]
x1["2000-03-27/"]
x1[as.POSIXct("2000-01-04")]
X1["2000-02-26/2000-03-03"]
x1["2000-02-26/2000-03-03"]
X1["/20000103"]
x1["/20000103"]
mtx.vals <- matrix(round(rnorm(25), 2), 5, 5)
mtx.vals
colnames(mtx.vals) <- paste('ts', 1:5, sep='')
mtx.vals
mtx < xts(mts.vals, as.POSIXct(c('2003-01-01', '2003-01-04', '2003-01-05', '2003-01-06', '2003-02-16')))
mtx <- xts(mts.vals, as.POSIXct(c('2003-01-01', '2003-01-04', '2003-01-05', '2003-01-06', '2003-02-16')))
mtx <- xts(mtx.vals, as.POSIXct(c('2003-01-01', '2003-01-04', '2003-01-05', '2003-01-06', '2003-02-16')))
mtx
mtx["2003-01", c("ts2", "ts5")]
index(mts)
index(mtx)
coredata(mts)
coredata(mtx)
GSPC_test <- as.xts(get.hist.quote("^GSPC", start = "1970-01-02"
, quote = c("Open", "High", "Low", "Close", "Volumn", "AdjClose")))
library(tseries)
install.packages("tseries")
library(tseries)
GSPC_test <- as.xts(get.hist.quote("^GSPC", start = "1970-01-02"
, quote = c("Open", "High", "Low", "Close", "Volumn", "AdjClose")))
head(GSPC_test)
GSPC_test <- as.xts(get.hist.quote("^GSPC", start = "1970-01-02"
, quote = c("Open", "High", "Low", "Close", "Volumn", "AdjClose")))
con <- url("http://quote.yahoo.com")
if(!inherits(try(open(con), silent = TRUE), "try-error")) {
close(con)
x <- get.hist.quote(instrument = "^gspc", start = "1998-01-01",
quote = "Close")plot(x)
x <- get.hist.quote(instrument = "ibm", quote = c("Cl", "Vol"))
plot(x, main = "International Business Machines Corp")
spc <- get.hist.quote(instrument = "^gspc", start = "1998-01-01",
quote = "Close")
ibm <- get.hist.quote(instrument = "ibm",  start = "1998-01-01",
quote = "AdjClose")
require("zoo") # For merge() method.
x <- merge(spc, ibm)
plot(x, main = "IBM vs S&P 500")
}
con <- url("https://www.oanda.com")
if(!inherits(try(open(con), silent = TRUE), "try-error")) {
close(con)
x <- get.hist.quote(instrument = "EUR/USD", provider = "oanda",
start = Sys.Date() - 500)
plot(x, main = "EUR/USD")
}
library(tseries)
con <- url("http://quote.yahoo.com")
if(!inherits(try(open(con), silent = TRUE), "try-error")) {
close(con)
x <- get.hist.quote(instrument = "^gspc", start = "1998-01-01",
quote = "Close")plot(x)
x <- get.hist.quote(instrument = "ibm", quote = c("Cl", "Vol"))
plot(x, main = "International Business Machines Corp")
spc <- get.hist.quote(instrument = "^gspc", start = "1998-01-01",
quote = "Close")
ibm <- get.hist.quote(instrument = "ibm",  start = "1998-01-01",
quote = "AdjClose")
require("zoo") # For merge() method.
x <- merge(spc, ibm)
plot(x, main = "IBM vs S&P 500")
}
summary(ibm)
nrow(ib)
nrow(ibm)
head(ibm)
con <- url("http://quote.yahoo.com")
if(!inherits(try(open(con), silent = TRUE), "try-error")) {
close(con)
GSPC <- as.xts(get.hist.quote("^GSPC", start = "1970-01-01", end = "2009-09-15"
, quote = c("Open", "High", "Low", "Close", "Volume", "AdjClose")))
}
library(xts)
con <- url("http://quote.yahoo.com")
if(!inherits(try(open(con), silent = TRUE), "try-error")) {
close(con)
GSPC <- as.xts(get.hist.quote("^GSPC", start = "1970-01-01", end = "2009-09-15"
, quote = c("Open", "High", "Low", "Close", "Volume", "AdjClose")))
}
head(GSPC)
library(quantmod)
getSymbols("^GSPC")
rnow(GSPC)
nrow(GSPC)
head(GSPC)
GSPC["1970-01"]
GSPC["2008-01"]
colnames(GSPC) <- c("Open", "High", "Low", "Close", "Volume", "AdjClose")
getSymbols("^GSPC", from = "1970-01-01", to = "2009-09-15")
colnames(GSPC) <- c("Open", "High", "Low", "Close", "Volume", "AdjClose")
head(GSPC)
GSPC["2008-01"]
setSymbolLookup(IBM = list(name ='IBM', src='yahoo'),
USDEUR=list(name='USD/EUR', src='oanda'))
getSymbols(c('IBM', 'USDEUR'))
head(IBM)
head(USDEUR)
candleChart(last(GSPC, "3 months"), theme = "white", TA = NULL)
avgPrice <- function(p) apply(HLC(p), 1, mean)
addAvgPrice <- newTA(FUN = avgPrice, col = 1, legend = "AvgPrice")
addT.ind <- newTA(FUN = T.ind, col = "red", legend = "tgtRet")
T.ind <- function(quotes, tgt.margin = 0.025, n.days = 10) {
v <- apply(HLC(quotes), 1, mean)
r <- matrix(NA, ncol = n.days, nrow = NROW(quotes))
for (x in 1:n.days) r[, x] <- Next(Delt(v, k = x), x)
x <- apply(r, 1, function(x) sum(x[x > tgt.margin | x <-tgt.margin]))
if (is.xts(quotes))
xts(x, time(quotes))
else x
}
addT.ind <- newTA(FUN = T.ind, col = "red", legend = "tgtRet")
addAvgPrice(on = 1)
addT.ind()
library(RODBC)
Panamera <- odbcDriverConnect('driver={SQL Server};server=PANAMERA;database=ibit_analytics_applications;trusted_connection=true')
car <- sqlQuery(Panamera, "SELECT calendar_date, team_Name, consultant_Name, agentid, effective_fte, financial_fte, historical_fte, (outbound_customers_sold_main+ outbound_customers_sold_affiliate+ inbound_customers_sold) AS cust_solds
, CASE WHEN effective_fte > 0 THEN (ISNULL(outbound_contacts_main, 0)+ ISNULL(outbound_contacts_affiliate, 0)+ ISNULL(inbound_contacts, 0))*1.00/effective_fte ELSE 0 END AS contacts_per_FTE
, CASE WHEN (ISNULL(outbound_contacts_main, 0)+ ISNULL(outbound_contacts_affiliate, 0)+ ISNULL(inbound_contacts, 0)) > 0 THEN (outbound_customers_sold_main+ outbound_customers_sold_affiliate+ inbound_customers_sold)*1.00/(ISNULL(outbound_contacts_main, 0)+ ISNULL(outbound_contacts_affiliate, 0)+ ISNULL(inbound_contacts, 0)) ELSE 0 end as conversion
FROM [dbo].[dmine_vw_agent_daily_stats_w_banding_tl_sm]
WHERE Business_Unit = 'GI'
AND Division = 'CAR'
AND calendar_date >= '2016-01-01'
AND calendar_date < '2016-06-23'
AND (outbound_contacts_main+ outbound_contacts_affiliate+ inbound_contacts) IS NOT null")
summary(car)
carcalllist<-sqlQuery(Ibit_Rimor, 'select * from dbo.temp_ml_car_calllist')
library(RODBC)
library(ggplot2)
library(rpart)
library(caret)
library(e1071)
library(dplyr)
library(ggplot2)
require(gridExtra)
carcalllist<-sqlQuery(Ibit_Rimor, 'select * from dbo.temp_ml_car_calllist')
Ibit_Rimor <- odbcDriverConnect('driver={SQL Server};server=EVORA;database=ibit_rimor;trusted_connection=true')
carcalllist<-sqlQuery(Ibit_Rimor, 'select * from dbo.temp_ml_car_calllist')
summary(carcalllist)
Cardata<-sqlQuery(Ibit_Rimor, 'select * from dbo.temp_ml_car_propensity')
summary(Cardata)
head(Cardata)
summary(Cardata)
names(Cardata)
Cardata<-sqlQuery(Ibit_Rimor, 'select * from dbo.temp_ml_car_propensity')
summary(Cardata)
car_model <- Cardata[, c('Gender','Make', 'Model', 'young_driver', 'incident', 'State', 'Year', 'hasexistingdamage'
, 'own_another_car', 'Age', 'sale_flag')]
trainCtrl <- trainControl(method = 'cv',
verboseIter = TRUE,
classProbs = TRUE)
library('foreach')
library('doSNOW')
cl <- makeCluster(4, type = "SOCK")
registerDoSNOW(cl)
model$sale_flag = as.factor(model$sale_flag)
head(model$sale_flag)
model$sale_flag
car_model$sale_flag
car_model$sale_flag = as.factor(car_model$sale_flag)
car_model$sale_flag
levels(car_model$sales) <- c("F", "T")
levels(car_model$sale_flag) <- c("F", "T")
set.seed(3721)
TrainIndex <- createDataPartition(y = car_model$sale_flag, p = 0.75, list = FALSE)
modelFormula <- as.formula("sale_flag ~ .")
Train <- car_model[TrainIndex,]
Test <- car_model[-TrainIndex,]
#Test <- subset(Test , select = -Origin)
dTree <- train(modelFormula,
data = Train,
method = 'rpart',
na.action = na.pass,
trControl = trainCtrl
)
sumamry(Train)
summary(Train)
TrainIndex <- createDataPartition(y = car_model$sale_flag, p = 0.85, list = FALSE)
Train <- car_model[TrainIndex,]
#Train <- subset(Train , select = -Origin)
Test <- car_model[-TrainIndex,]
modelFormula <- as.formula("sale_flag ~ .")
fit.log = glm(modelFormula, data = Train, family = binomial )
c <- coefficients(fit.log)
c
p <- predict.glm(fit.log, newdata = Train,type = "response")
p <- predict.glm(fit.log, newdata = Train,type = "response")
c_order <- order(c)
c[c_order]
p <- predict.glm(fit.log, newdata = Train,type = "response")
levels(Cardata$Gender)
summary(Cardata)
library(rattle)
rattle()
library(rattle)
rattle()
getwd()
setwd("C:\Users\mli\Documents\Personal\Training\Exploratory Graphs\Assignment1")
setwd("C:\\Users\\mli\\Documents\\Personal\\Training\\Exploratory Graphs\\Assignment1")
getwd()
